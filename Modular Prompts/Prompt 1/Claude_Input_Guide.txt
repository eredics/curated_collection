# Step-by-Step Claude + GitHub Copilot Chat Recipe
## üñºÔ∏è Core Gallery Setup ‚Äî Modular Prompt Workflow with GitHub Integration

This is a step-by-step recipe to build your art gallery using Claude Sonnet inside GitHub Copilot Chat.

---

## üß∞ BEFORE YOU BEGIN

Make sure you have:
- Claude Sonnet active in GitHub Copilot Chat (inside VS Code)
- A GitHub repository created and cloned locally
- These core files in your repo (can be empty to start):

```
/index.html
/css/styles.css
/js/main.js
/js/constants.js
/js/utils.js
/js/failsafe.js
```

---

## üß± STEP-BY-STEP BUILD PROCESS

üîÅ REPEAT THE FOLLOWING FOR EACH MODULE:

### STEP 1: Open the Relevant File(s)
For example:
- `index.html` for layout or splash
- `main.js` for logic
- `styles.css` for visual styling

### STEP 2: Paste a Module into Claude
Paste the content of a module file into Claude‚Äôs chat prompt.

### STEP 3: Ask Claude These Questions

1. "What files should I edit for this module?"
2. "Please generate the required HTML, CSS, and JS to implement it."
3. "Add inline comments so I understand what each part does."
4. "What could go wrong in this implementation?"

### STEP 4: Review + Accept Changes
Use Claude to refine further:
> ‚ÄúAdd keyboard accessibility‚Äù  
> ‚ÄúHelp me debug this one part only‚Äù

### STEP 5: Save and Sync with GitHub

```bash
git add .
git commit -m "Module 03: Splash screen"
git push
```

---

## ‚úÖ PROGRESS CHECKLIST

- [X] Module 01: File setup
- [X] Module 02: Splash screen
- [X] Module 03: Data loading and image mapping
- [X] Module 04: Gallery layout and responsiveness
- [X] Module 05: Caption toggling
- [X] Module 06: Image error handling
- [X] Module 07: Accessibility improvements
- [X] Module 08: CSP and script loading
- [X] Module 09: Lazy loading for performance
- [X] Module 10: Gallery HTML structure

---

You‚Äôre not just feeding prompts. You‚Äôre building a real app. Treat each module like a feature and Claude like your dev partner.