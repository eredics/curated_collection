# Claude + GitHub Copilot Chat Recipe Guide
## üìä Prompt 2: Data Loading & Basic Filtering

Use this recipe to walk through each module and build data filtering features with Claude Sonnet.

---

## BEFORE YOU START

1. Ensure you have a GitHub repo ready and cloned.
2. Claude should be active inside GitHub Copilot Chat (e.g. in VS Code).
3. Files like `dataController.js` and `dataModel.js` should be created empty in your /js/ folder.

---

## FOR EACH MODULE, FOLLOW THESE STEPS

### STEP 1: Open Relevant File(s)
Open the file Claude will need to modify. Example: `js/dataController.js` for data loading.

---

### STEP 2: Paste the Module Prompt into Claude
Open the relevant .txt file (e.g. `Prompt2_01_Data_Processing_Modules.txt`)  
Paste it into Claude Chat.

---

### STEP 3: Ask Claude These Questions

1. "Which files need to be modified?"
2. "Generate all code to complete this module: HTML, JS, CSS."
3. "Explain any parts that might break or need testing."
4. "What assumptions are you making in this implementation?"

---

### STEP 4: Review & Adjust
Accept Claude's code or refine further:
> ‚ÄúAdd debouncing to the filter update‚Äù  
> ‚ÄúUse a dropdown instead of checkboxes‚Äù

---

### STEP 5: Save + Sync with GitHub

```bash
git add .
git commit -m "Implement Prompt 2 Module 03: Filter Panel Design"
git push
```

---

## ‚úÖ MODULE CHECKLIST

- [X] 01 - Data modules (dataModel & dataController)
- [X] 02 - CSV parsing with error handling
- [X] 03 - Filter panel structure
- [ ] 04 - Filter UI controls
- [ ] 05 - Filter integration logic with reactivity

---

Work step-by-step and commit after each successful module.
You‚Äôre not just filtering data‚Äîyou‚Äôre building an interactive, client-side art experience.

---

## Gallery Implementation Requirements

Implement a gallery with the following specific requirements:
- Use flexbox layout (not CSS grid) with flex: 0 0 220px for items
- Each artwork must be exactly 240px tall with zero margins
- Use an 8px gap between items
- Images must maintain aspect ratio with object-fit: contain
- No captions should affect the layout (hide if needed)

Ensure code works across browsers by:
- Avoiding CSS properties with inconsistent implementation
- Using feature detection for modern JavaScript features
- Including appropriate polyfills
- Testing scroll behavior with different window sizes
- Using standard event models that work in all major browsers

Implement these fallbacks to ensure robust behavior:
- Basic rendering if virtual scrolling fails
- Default image placeholders if images don't load
- Alternative layout for extreme window sizes
- User notifications for any processing delays
- Degraded but functional experience without JavaScript

The gallery must meet these performance targets:
- First batch of images visible within 500ms
- Smooth scrolling at 60fps when loading new batches
- Memory usage under 100MB for 1,000 images
- No layout shifts when new items are added
- Idle CPU usage under 5% during scrolling

